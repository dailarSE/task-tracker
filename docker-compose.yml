services:
  postgres:
    image: ${POSTGRES_IMAGE:-postgres:17.4}
    
    container_name: task-tracker-postgres
    environment:
      POSTGRES_DB: task_tracker_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - task-tracker-net
    restart: unless-stopped
    secrets:
      - postgres_user
      - postgres_password
   
  kafka:
    image: bitnami/kafka:4.0.0 # Используем образ Bitnami с поддержкой KRaft
    container_name: task-tracker-kafka # Задаем фиксированное имя контейнера

    ports:
      # Пробрасываем порт 9092 на хост для доступа с localhost:9092.
      # Этот внешний порт будет мапиться на ВНУТРЕННИЙ порт 9094 (слушатель EXTERNAL).
      - '9092:9094'
      # Внутренний порт 9092 (слушатель INTERNAL) доступен внутри Docker сети по имени сервиса 'kafka:9092'.
      # Внутренний порт 9093 (слушатель CONTROLLER) доступен внутри Docker сети по имени сервиса 'kafka:9093' для KRaft.
      # Контроллер порт 9093 не пробрасываем на хост.

    networks:
      # Подключаем к общей сети для коммуникации с другими сервисами
      - task-tracker-net
    volumes:
      # Том для сохранения данных и метаданных KRaft между запусками
      # Мапим именованный том на директорию данных Bitnami Kafka внутри контейнера
      - kafkadata:/opt/bitnami/kafka/data

    environment:
      # --- Настройки KRaft ---
      KAFKA_ENABLE_KRAFT: 'yes' # Включаем режим KRaft
      KAFKA_BROKER_ID: 1        # Уникальный ID брокера
      KAFKA_NODE_ID: 1          # Уникальный ID узла KRaft (совпадает с Broker ID для одного узла)
      # Роль процесса KRaft: этот узел является и брокером, и контроллером
      KAFKA_CFG_PROCESS_ROLES: broker,controller

      # --- Настройка слушателей и рекламируемых адресов ---
      # Настройка слушателей ВНУТРИ контейнера, привязанных к РАЗНЫМ портам
      # INTERNAL://:9092   - Для трафика внутри Docker сети
      # CONTROLLER://:9093 - Для внутренней коммуникации KRaft
      # EXTERNAL://:9094   - Для трафика с хост-машины через проброшенный порт 9092->9094
      KAFKA_LISTENERS: INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://:9094

      # Настройка РЕКЛАМИРУЕМЫХ адресов - как клиенты должны подключаться
      # INTERNAL://kafka:9092    - Адрес для клиентов внутри Docker сети (имя сервиса)
      # EXTERNAL://localhost:9092 - Адрес для клиентов на хост-машине (localhost и проброшенный порт 9092)
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9092

      # Маппинг протоколов безопасности к слушателям (для PLAINTEXT просто указываем PLAINTEXT)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT

      # Указываем, какой слушатель используется для коммуникации между брокерами (для 1 узла это формальность)
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      # Имя слушателя контроллера
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER

      # Информация о кворуме контроллеров (для 1 узла - он сам).
      # Формат: <NodeId>@<Hostname>:<Port>
      # Используем внутреннее имя сервиса 'kafka' и внутренний порт контроллера 9093
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093

      # --- Прочее ---
      # Разрешаем нешифрованный трафик для простоты в dev (специфично для Bitnami)
      ALLOW_PLAINTEXT_LISTENER: 'yes'

      # Задержка ребалансировки групп консьюмеров при старте (для dev ускоряем)
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # Директория, где Kafka будет хранить данные. Должна совпадать с маппингом тома.
      KAFKA_STORAGE_DIRS: /opt/bitnami/kafka/data

      # Фактор репликации для топика смещений консьюмеров (важно для стабильности в 1-узловом кластере)
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      # Автоматическое создание топика EMAIL_SENDING_TASKS при старте (имя:партиции:репликации) - удобно для dev
      KAFKA_CREATE_TOPICS_EXTRA: "EMAIL_SENDING_TASKS:1:1"


    # Bitnami образ сам форматирует хранилище KRaft при первом запуске, если директория пуста.
    # Не требуется сложная 'command' секция как у Confluent.

    restart: unless-stopped

volumes:
  pgdata:
  kafkadata:

networks:
  task-tracker-net:
    driver: bridge

secrets:
  postgres_user:
    file: ./secrets/.postgres_user 
  postgres_password:
    file: ./secrets/.postgres_password